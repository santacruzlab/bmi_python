

import numpy as np 
import pickle
import matplotlib.pyplot as plt
from db import dbfunctions as dbfn
from db.tracker import models

#### How to edit safety grid to decrease or increase tolerance: 
#### Choose latest TE to edit. Get files: 

# safety_mat_pkl, target_mat_pkl, te_num = get_safety_targ_files(TE)

#### Editing files: Choose area (rectangle) you want to add or remove to 
#### the XY part of the safety grid. If you want to add the part, set 
#### define_as_valid = True. If you want to remove the part 
#### define_as_valid = False. Find the bottom right corner 
#### and top left corner of the rectangle you want to add / remove. 
#### This can be done by looking at the plot generated by loading a 
#### safety matrix (safe = pickle.load(open(safety_path))) and plotting
#### the valid area (safe.plot_valid_area()). Note that bot_left_xy = 
#### (x_cm_bot_left, y_cm_bot_left), and 
#### top_right_xy = (x_cm_top_right, y_cm_top_right). E.g. try this: 

# safety_mat_pkl, target_mat_pkl, te_num = get_safety_targ_files(9228)
# edit_safety.edit_xy_tolerance(safety_mat_pkl, target_mat_pkl, te_num, 
#    bot_left_xy=(30, 24), top_right_xy=(50, 28), define_as_valid=False, )

#### you'll see the giant invalid rectangle taken out from (30, 24) --> (50, 28)
#### and you should see an assetion error raised becuase now the rest position is 
#### no longer valid in this safety grid. Once you're ready to commit to your 
#### safety grid modification, you can make 'save=True' and save the grid. 

#### You can also mkae many modifications to the same grid by returning 'safe':

# safe = edit_safety.edit_xy_tolerance(safety_mat_pkl, target_mat_pkl, te_num, 
#    bot_left_xy=(30, 24), top_right_xy=(50, 28), define_as_valid=False, )

# safe1 = edit_safety.edit_xy_tolerance(safety_mat_pkl, target_mat_pkl, te_num, 
#    bot_left_xy=(10, 44), top_right_xy=(25, 48), define_as_valid=False, safe=safe)


def get_safety_targ_files(te):
    tsk = dbfn.TaskEntry(te)
    sf = models.DataFile.objects.get(pk=tsk.safety_grid_file)
    tg = models.DataFile.objects.get(pk=tsk.targets_matrix)
    return sf.path, tg.path, te

def edit_xy_tolerance(safety_mat_pkl, target_mat_pkl, te_num,
    bot_left_xy=(0,0), top_right_xy=(0,0), define_as_valid = False, 
    save=False, suffix='_trimmed', safe=None):

    if safe is None:
        safe = pickle.load(open(safety_mat_pkl))

    targ = pickle.load(open('/storage/target_matrices/'+target_mat_pkl))

    def plot_safe(safe2, targ2):
        # Plot x/y area and R, G, B, Rest: 
        safe2.plot_valid_area()
        plt.plot(targ2['red'][0][0], targ2['red'][0][1], 'c.')
        plt.plot(targ2['green'][0][0], targ2['green'][0][1], 'c.')
        plt.plot(targ2['blue'][0][0], targ2['blue'][0][1], 'c.')
        plt.plot(targ2['red'][1][0], targ2['red'][1][1], 'c.')

    plot_safe(safe, targ)

    blx, bly = sq_bot_left = safe._pos_to_square(bot_left_xy)
    trx, tryy = sq_top_right = safe._pos_to_square(top_right_xy)

    # X axis: 
    for x in range(blx, trx):
        for y in range(bly, tryy):
            safe._grid['is_valid'][x, y] = define_as_valid

    # Now check that all targets fit ok: 
    for t in ['red', 'blue', 'green']:
        assert safe.is_valid_pos((targ[t][0][0], targ[t][0][1]))
        assert safe.is_valid_pos((targ[t][1][0], targ[t][1][1]))

    plot_safe(safe, targ)

    if save:
        path = safety_mat_pkl[-4:] + suffix + '.pkl'
        pickle.dump(safe, open(path, 'wb'))
        dfs = models.DataFile.objects.filter(path =path)

        if len(dfs) == 0:
            data_sys = models.System.make_new_sys('safety')
            data_sys.name = path
            data_sys.entry = models.TaskEntry.objects.get(id=te_num)
            data_sys.save_to_file(safe, path, obj_name=None, entry_id=te_num)
        else:
            raise Exception('Cannot save file -- same name already exists in DB')

        print 'path: ', path
    return safe

