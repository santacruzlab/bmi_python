'''
BMI code specific to the ISMORE project
'''
import numpy as np 
from riglib.stereo_opengl import ik
from riglib.bmi import feedback_controllers
from riglib.bmi.state_space_models import State, StateSpace, offset_state, _gen_A
from riglib.bmi.assist import Assister
from riglib.bmi.clda import Learner, OFCLearner
import pickle

from utils.angle_utils import *
from utils.constants import *



######################
## State-space models 
######################
class StateSpaceArmAssist(StateSpace):
    def __init__(self):
        max_vel = 2  # cm/s
        max_ang_vel = 7.5 * deg_to_rad
        super(StateSpaceArmAssist, self).__init__(
            State('aa_px',   stochastic=False, drives_obs=False, order=0, min_val=0., max_val=42.),
            State('aa_py',   stochastic=False, drives_obs=False, order=0, min_val=0., max_val=30.),
            State('aa_ppsi', stochastic=False, drives_obs=False, order=0),
            State('aa_vx',   stochastic=True,  drives_obs=True,  order=1, min_val=-max_vel, max_val=max_vel),
            State('aa_vy',   stochastic=True,  drives_obs=True,  order=1, min_val=-max_vel, max_val=max_vel),
            State('aa_vpsi', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            offset_state
        )

    def get_ssm_matrices(self, update_rate=0.1):
        # for now, just use a fixed vel_decay for A and vel_var for W
        #   regardless of the value of update_rate
        vel_decay = 0.6
        A = _gen_A(1, update_rate, 0, vel_decay, 1, ndim=3) 
        vel_var = 7.
        W = _gen_A(0,           0, 0,   vel_var, 0, ndim=3)  # there is no separate _gen_W function

        W[3:6, 3:6] = 0.5*np.array(np.diag([0.56494, 0.56494, 0.56494]))


        # Control input matrix for SSM for control inputs
        I = np.mat(np.eye(3))
        B = np.vstack([0*I, update_rate*1000 * I, np.zeros([1, 3])])
        return A, B, W


class StateSpaceReHand(StateSpace):
    def __init__(self):
        max_ang_vel = 7.5 * deg_to_rad
        super(StateSpaceReHand, self).__init__(
            State('rh_pthumb', stochastic=False, drives_obs=False, order=0),
            State('rh_pindex', stochastic=False, drives_obs=False, order=0),
            State('rh_pfing3', stochastic=False, drives_obs=False, order=0),
            State('rh_pprono', stochastic=False, drives_obs=False, order=0),
            State('rh_vthumb', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            State('rh_vindex', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            State('rh_vfing3', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            State('rh_vprono', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            offset_state
        )

    def get_ssm_matrices(self, update_rate=0.1):
        # for now, just use a fixed vel_decay for A and vel_var for W
        #   regardless of the value of update_rate
        vel_decay = 0.95
        A = _gen_A(1, update_rate, 0, vel_decay, 1, ndim=4) 
        vel_var = 7.
        W = _gen_A(0,           0, 0,   vel_var, 0, ndim=4)  # there is no separate _gen_W function

        # Control input matrix for SSM for control inputs
        I = np.mat(np.eye(4))
        B = np.vstack([0*I, update_rate*1000 * I, np.zeros([1, 4])])
        return A, B, W


class StateSpaceIsMore(StateSpace):
    def __init__(self):
        max_vel = 2  # cm/s
        max_ang_vel = 7.5 * deg_to_rad
        super(StateSpaceIsMore, self).__init__(
            # position states
            State('aa_px',     stochastic=False, drives_obs=False, order=0, min_val=0., max_val=42.),
            State('aa_py',     stochastic=False, drives_obs=False, order=0, min_val=0., max_val=30.),
            State('aa_ppsi',   stochastic=False, drives_obs=False, order=0),
            State('rh_pthumb', stochastic=False, drives_obs=False, order=0),
            State('rh_pindex', stochastic=False, drives_obs=False, order=0),
            State('rh_pfing3', stochastic=False, drives_obs=False, order=0),
            State('rh_pprono', stochastic=False, drives_obs=False, order=0),

            # velocity states
            State('aa_vx',     stochastic=True,  drives_obs=True,  order=1, min_val=-max_vel, max_val=max_vel),
            State('aa_vy',     stochastic=True,  drives_obs=True,  order=1, min_val=-max_vel, max_val=max_vel),
            State('aa_vpsi',   stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            State('rh_vthumb', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            State('rh_vindex', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            State('rh_vfing3', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),
            State('rh_vprono', stochastic=True,  drives_obs=True,  order=1, min_val=-max_ang_vel, max_val=max_ang_vel),

            # offset state
            offset_state
        )

    def get_ssm_matrices(self, update_rate=0.1):
        # for now, just use a fixed vel_decay for A and vel_var for W
        #   regardless of the value of update_rate
        vel_decay = 0.95
        A = _gen_A(1, update_rate, 0, vel_decay, 1, ndim=7) 
        vel_var = 7
        W = _gen_A(0,           0, 0,   vel_var, 0, ndim=7)  # there is no separate _gen_W function

        # Control input matrix for SSM for control inputs
        I = np.mat(np.eye(7))
        B = np.vstack([0*I, update_rate*1000 * I, np.zeros([1, 7])])
        return A, B, W


####################
## iBMI assisters ##
####################

# simple iBMI assisters

class ArmAssistAssister(Assister):
    '''Simple assister that moves ArmAssist position towards the xy target 
    at a constant speed, and towards the psi target at a constant angular 
    speed. When within a certain xy distance or angular distance of the 
    target, these speeds are reduced.'''

    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        self.call_rate  = kwargs.pop('call_rate',  10)             # secs
        self.xy_speed   = kwargs.pop('xy_speed',   2.)             # cm/s
        self.xy_cutoff  = kwargs.pop('xy_cutoff',  2.)             # cm
        self.psi_speed  = kwargs.pop('psi_speed',  5.*deg_to_rad)  # rad/s
        self.psi_cutoff = kwargs.pop('psi_cutoff', 5.*deg_to_rad)  # rad

    def calc_assisted_BMI_state(self, current_state, target_state, assist_level, mode=None, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        if assist_level > 0:
            xy_pos  = np.array(current_state[0:2, 0]).ravel()
            psi_pos = np.array(current_state[  2, 0]).ravel()
            target_xy_pos  = np.array(target_state[0:2, 0]).ravel()
            target_psi_pos = np.array(target_state[  2, 0]).ravel()
            assist_xy_pos, assist_xy_vel = self._xy_assist(xy_pos, target_xy_pos)
            assist_psi_pos, assist_psi_vel = self._psi_assist(psi_pos, target_psi_pos)

            # if mode == 'hold':
            #     print 'task state is "hold", setting assist vels to 0'
            #     assist_xy_vel[:] = 0.
            #     assist_psi_vel[:] = 0.

            Bu = assist_level * np.hstack([assist_xy_pos, 
                                           assist_psi_pos,
                                           assist_xy_vel,
                                           assist_psi_vel,
                                           1])
            Bu = np.mat(Bu.reshape(-1, 1))

            assist_weight = assist_level
        else:
            Bu = None
            assist_weight = 0.
        return dict(Bu=Bu, assist_level=assist_weight)
        # return Bu, assist_weight

    def _xy_assist(self, xy_pos, target_xy_pos):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        diff_vec = target_xy_pos - xy_pos
        dist_to_target = np.linalg.norm(diff_vec)
        dir_to_target = diff_vec / (np.spacing(1) + dist_to_target)

        # if xy distance is below xy_cutoff (e.g., target radius), use smaller speed
        if dist_to_target < self.xy_cutoff:
            frac = 0.5 * dist_to_target / self.xy_cutoff
            assist_xy_vel = frac * self.xy_speed * dir_to_target
        else:
            assist_xy_vel = self.xy_speed * dir_to_target

        assist_xy_pos = xy_pos + assist_xy_vel/self.call_rate

        return assist_xy_pos, assist_xy_vel

    def _psi_assist(self, psi_pos, target_psi_pos):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        psi_diff = angle_subtract(target_psi_pos, psi_pos)

        # if angular distance is below psi_cutoff, use smaller speed
        if abs(psi_diff) < self.psi_cutoff:
            assist_psi_vel = 0.5 * (psi_diff / self.psi_cutoff) * self.psi_speed
        else:
            assist_psi_vel = np.sign(psi_diff) * self.psi_speed

        assist_psi_pos = psi_pos + assist_psi_vel/self.call_rate

        return assist_psi_pos, assist_psi_vel


class ReHandAssister(Assister):
    '''Simple assister that moves ReHand joint angles towards their angular
    targets at a constant angular speed. When angles are close to the target
    angles, these speeds are reduced.'''

    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        self.call_rate  = kwargs.pop('call_rate' , 10)             # secs
        self.ang_speed  = kwargs.pop('ang_speed',  5.*deg_to_rad)  # rad/s
        self.ang_cutoff = kwargs.pop('ang_cutoff', 5.*deg_to_rad)  # rad

    def calc_assisted_BMI_state(self, current_state, target_state, assist_level, mode=None, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        if assist_level > 0:
            assist_rh_pos = np.zeros((0, 1))
            assist_rh_vel = np.zeros((0, 1))

            for i in range(4):
                rh_i_pos = np.array(current_state[i, 0]).ravel()
                target_rh_i_pos = np.array(target_state[i, 0]).ravel()
                assist_rh_i_pos, assist_rh_i_vel = self._angle_assist(rh_i_pos, target_rh_i_pos)
                assist_rh_pos = np.vstack([assist_rh_pos, assist_rh_i_pos])
                assist_rh_vel = np.vstack([assist_rh_vel, assist_rh_i_vel])

            # if mode == 'hold':
            #     print 'task state is "hold", setting assist vels to 0'
            #     assist_rh_vel[:] = 0.

            Bu = assist_level * np.vstack([assist_rh_pos,
                                           assist_rh_vel,
                                           1])
            Bu = np.mat(Bu.reshape(-1, 1))

            assist_weight = assist_level
        else:
            Bu = None
            assist_weight = 0.
        return dict(Bu=Bu, assist_level=assist_weight)
        # return Bu, assist_weight

    def _angle_assist(self, ang_pos, target_ang_pos):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        ang_diff = angle_subtract(target_ang_pos, ang_pos)
        if abs(ang_diff) > self.ang_cutoff:
            assist_ang_vel = np.sign(ang_diff) * self.ang_speed
        else:
            assist_ang_vel = 0.5 * (ang_diff / self.ang_cutoff) * self.ang_speed

        assist_ang_pos = ang_pos + assist_ang_vel/self.call_rate

        return assist_ang_pos, assist_ang_vel


class IsMoreAssister(Assister):
    '''Combines an ArmAssistAssister and a ReHandAssister.'''

    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        self.aa_assister = ArmAssistAssister(*args, **kwargs)
        self.rh_assister = ReHandAssister(*args, **kwargs)

    def calc_assisted_BMI_state(self, current_state, target_state, assist_level, mode=None, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        if assist_level > 0:
            aa_current_state = np.vstack([current_state[0:3], current_state[7:10], 1])
            aa_target_state  = np.vstack([target_state[0:3], target_state[7:10], 1])
            aa_Bu = self.aa_assister.calc_assisted_BMI_state(aa_current_state,
                                                             aa_target_state,
                                                             assist_level,
                                                             mode=mode,
                                                             **kwargs)[0]

            rh_current_state = np.vstack([current_state[3:7], current_state[10:14], 1])
            rh_target_state  = np.vstack([target_state[3:7], target_state[10:14], 1])
            rh_Bu = self.rh_assister.calc_assisted_BMI_state(rh_current_state,
                                                             rh_target_state,
                                                             assist_level,
                                                             mode=mode,
                                                             **kwargs)[0]

            Bu = np.vstack([aa_Bu[0:3],
                            rh_Bu[0:4],
                            aa_Bu[3:6],
                            rh_Bu[4:8],
                            assist_level * 1])
            Bu = np.mat(Bu.reshape(-1, 1))

            assist_weight = assist_level
        else:
            Bu = None
            assist_weight = 0.
        return dict(Bu=Bu, assist_level=assist_weight)
        # return Bu, assist_weight


# LFC iBMI assisters
# not inheriting from LinearFeedbackControllerAssist/SSMLFCAssister because:
# - use of "special angle subtraction" when doing target_state - current_state
# - meant to be used with 'weighted_avg_lfc'=True decoder kwarg, and thus 
#   assist_weight is set to assist_level, not to 0


from riglib.bmi.feedback_controllers import LQRController
from riglib.bmi.assist import FeedbackControllerAssist
class ArmAssistController(LQRController):
    def __init__(self, *args, **kwargs):
        ssm = StateSpaceArmAssist()
        A, B, _ = ssm.get_ssm_matrices()
        Q = 10*np.mat(np.diag([1., 1., 1., 0, 0, 0, 0]))
        R = 2e5 * np.mat(np.diag([1., 1., 1.]))
        super(ArmAssistController, self).__init__(A, B, Q, R)

arm_assist_controller = ArmAssistController()

class ArmAssistLFCAssister(FeedbackControllerAssist):
    def __init__(self, *args, **kwargs):
        super(ArmAssistLFCAssister, self).__init__(fb_ctrl=arm_assist_controller, style="mixing")

# class ArmAssistLFCAssister(Assister):
#     '''
#     Docstring

#     Parameters
#     ----------

#     Returns
#     -------
#     '''
#     def __init__(self, *args, **kwargs):
#         '''
#         Docstring

#         Parameters
#         ----------

#         Returns
#         -------
#         '''
#         ssm = StateSpaceArmAssist()
#         A, B, _ = ssm.get_ssm_matrices()
#         Q = np.mat(np.diag([1., 1., 1., 0, 0, 0, 0]))
#         R = 1e6 * np.mat(np.diag([1., 1., 1.]))

#         self.A = A
#         self.B = B
#         self.Q = Q
#         self.R = R
#         self.F = feedback_controllers.LQRController.dlqr(A, B, Q, R)

#     def calc_assisted_BMI_state(self, current_state, target_state, assist_level, mode=None, **kwargs):
#         '''TODO.'''

#         diff = target_state - current_state
#         diff[2] = angle_subtract(target_state[2], current_state[2])

#         Bu = assist_level * self.B*self.F*diff
#         assist_weight = assist_level
#         return dict(Bu=Bu, assist_level=assist_weight)
#         # return Bu, assist_weight


class ReHandLFCAssister(Assister):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        ssm = StateSpaceReHand()
        A, B, _ = ssm.get_ssm_matrices()
        Q = np.mat(np.diag([1., 1., 1., 1., 0, 0, 0, 0, 0]))
        R = 1e6 * np.mat(np.diag([1., 1., 1., 1.]))
        
        self.A = A
        self.B = B
        self.Q = Q
        self.R = R
        self.F = feedback_controllers.LQRController.dlqr(A, B, Q, R)

    def calc_assisted_BMI_state(self, current_state, target_state, assist_level, mode=None, **kwargs):
        '''TODO.'''

        diff = target_state - current_state
        for i in range(4):
            diff[i] = angle_subtract(target_state[i], current_state[i])

        Bu = assist_level * self.B*self.F*diff
        assist_weight = assist_level
        return dict(Bu=Bu, assist_level=assist_weight)
        # return Bu, assist_weight


class IsMoreLFCAssister(Assister):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        ssm = StateSpaceIsMore()
        A, B, _ = ssm.get_ssm_matrices()        
        Q = np.mat(np.diag([7., 7., 7., 7., 7., 7., 7., 0, 0, 0, 0, 0, 0, 0, 0]))
        R = 1e6 * np.mat(np.diag([1., 1., 1., 1., 1., 1., 1.]))

        self.A = A
        self.B = B
        self.Q = Q
        self.R = R
        self.F = feedback_controllers.LQRController.dlqr(A, B, Q, R)

    def calc_assisted_BMI_state(self, current_state, target_state, assist_level, mode=None, **kwargs):
        '''TODO.'''
        diff = target_state - current_state
        for i in range(2, 7):
            diff[i] = angle_subtract(target_state[i], current_state[i])

        Bu = assist_level * self.B*self.F*diff
        assist_weight = assist_level
        return dict(Bu=Bu, assist_level=assist_weight)
        # return Bu, assist_weight

###################
## iBMI learners ##
###################

# simple iBMI learners that just use an "assister" object

class ArmAssistLearner(Learner):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        decoder_binlen = kwargs.pop('decoder_binlen', 0.1)
        assist_speed   = kwargs.pop('assist_speed', 2.)
        target_radius  = kwargs.pop('target_radius', 2.)
        assister_kwargs = dict(decoder_binlen=decoder_binlen, target_radius=target_radius, assist_speed=assist_speed)
        self.assister = assist.ArmAssistAssister(**assister_kwargs)

        super(ArmAssistLearner, self).__init__(*args, **kwargs)

        self.input_state_index = -1

    def calc_int_kin(self, decoder_state, target_state, decoder_output, task_state, state_order=None):
        """Calculate/estimate the intended ArmAssist kinematics."""
        current_state = decoder_state[:, None]  # assister expects shape to be (7, 1)
        target_state  = target_state[:, None]   # assister expects shape to be (7, 1)
        intended_state = self.assister(current_state, target_state, 1)[0]

        return intended_state

    def __call__(self, neural_features, decoder_state, target_state, decoder_output, task_state, state_order=None):
        '''Calculate the intended kinematics and pair with the neural data.'''
        super(ArmAssistLearner, self).__call__(neural_features, decoder_state, target_state, decoder_output, task_state, state_order=state_order)


class ReHandLearner(Learner):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        decoder_binlen = kwargs.pop('decoder_binlen', 0.1)
        assist_speed   = kwargs.pop('assist_speed', 2.)
        target_radius  = kwargs.pop('target_radius', 2.)
        assister_kwargs = dict(decoder_binlen=decoder_binlen, target_radius=target_radius, assist_speed=assist_speed)
        self.assister = assist.ReHandAssister(**assister_kwargs)

        super(ReHandLearner, self).__init__(*args, **kwargs)

        self.input_state_index = -1

    def calc_int_kin(self, decoder_state, target_state, decoder_output, task_state, state_order=None):
        """Calculate/estimate the intended ReHand kinematics."""
        current_state = decoder_state[:, None]  # assister expects shape to be (9, 1)
        target_state  = target_state[:, None]   # assister expects shape to be (9, 1)
        intended_state = self.assister(current_state, target_state, 1)[0]

        return intended_state

    def __call__(self, neural_features, decoder_state, target_state, decoder_output, task_state, state_order=None):
        '''Calculate the intended kinematics and pair with the neural data.'''
        super(ReHandLearner, self).__call__(neural_features, decoder_state, target_state, decoder_output, task_state, state_order=state_order)


class IsMoreLearner(Learner):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, *args, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        decoder_binlen = kwargs.pop('decoder_binlen', 0.1)
        assist_speed   = kwargs.pop('assist_speed', 2.)
        target_radius  = kwargs.pop('target_radius', 2.)
        assister_kwargs = dict(decoder_binlen=decoder_binlen, target_radius=target_radius, assist_speed=assist_speed)
        self.assister = assist.IsMoreAssister(**assister_kwargs)

        super(IsMoreLearner, self).__init__(*args, **kwargs)

        self.input_state_index = -1

    def calc_int_kin(self, decoder_state, target_state, decoder_output, task_state, state_order=None):
        """Calculate/estimate the intended ArmAssist+ReHand kinematics."""
        current_state = decoder_state[:, None]  # assister expects shape to be (15, 1)
        target_state  = target_state[:, None]   # assister expects shape to be (15, 1)
        intended_state = self.assister(current_state, target_state, 1)[0]

        return intended_state

    def __call__(self, neural_features, decoder_state, target_state, decoder_output, task_state, state_order=None):
        '''Calculate the intended kinematics and pair with the neural data.'''
        super(IsMoreLearner, self).__call__(neural_features, decoder_state, target_state, decoder_output, task_state, state_order=state_order)


# OFC iBMI learners

class ArmAssistOFCLearner(OFCLearner):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, batch_size, *args, **kwargs):
        '''Specific instance of the OFCLearner for the ArmAssist.'''
        dt = kwargs.pop('dt', 0.1)

        ssm = StateSpaceArmAssist()
        A, B, _ = ssm.get_ssm_matrices()
        
        # TODO -- velocity cost? not necessary?
        Q = np.mat(np.diag([1., 1., 1., 0, 0, 0, 0]))
        self.Q = Q
        
        R = 1e7 * np.mat(np.diag([1., 1., 1.]))
        self.R = R

        F = feedback_controllers.LQRController.dlqr(A, B, Q, R)
        F_dict = RegexKeyDict()
        F_dict['.*'] = F

        super(ArmAssistOFCLearner, self).__init__(batch_size, A, B, F_dict, *args, **kwargs)

        self.input_state_index = -1
    
    def calc_int_kin(self, current_state, target_state, decoder_output, task_state, state_order=None):
        '''Overriding to account for proper subtraction of angles.'''
        try:
            current_state = np.mat(current_state).reshape(-1, 1)
            target_state = np.mat(target_state).reshape(-1, 1)
            F = self.F_dict[task_state]
            A = self.A
            B = self.B

            diff = target_state - current_state
            diff[2] = angle_subtract(target_state[2], current_state[2])

            u = F*diff
            state_cost = diff.T * self.Q * diff
            ctrl_cost  = u.T * self.R * u

            # print 'target_state:', target_state
            # print 'state x cost:', diff[0]**2 * float(self.Q[0, 0])
            # print 'state y cost:', diff[1]**2 * float(self.Q[1, 1])
            # print 'state z cost:', diff[2]**2 * float(self.Q[2, 2])
            # print 'u x cost:', u[0]**2 * float(self.R[0, 0])
            # print 'u y cost:', u[1]**2 * float(self.R[1, 1])
            # print 'u z cost:', u[2]**2 * float(self.R[2, 2])
            # print 'state cost:', float(state_cost)
            # print 'ctrl cost:', float(ctrl_cost)
            # print '\n'

            return A*current_state + B*F*(diff)        
        except KeyError:
            return None


class ReHandOFCLearner(OFCLearner):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, batch_size, *args, **kwargs):
        '''Specific instance of the OFCLearner for the ReHand.'''
        dt = kwargs.pop('dt', 0.1)

        ssm = StateSpaceReHand()
        A, B, _ = ssm.get_ssm_matrices()
        
        # TODO -- velocity cost? not necessary?
        Q = np.mat(np.diag([1., 1., 1., 1., 0, 0, 0, 0, 0]))
        self.Q = Q
        
        R = 1e7 * np.mat(np.diag([1., 1., 1., 1.]))
        self.R = R

        F = feedback_controllers.LQRController.dlqr(A, B, Q, R)
        F_dict = RegexKeyDict()
        F_dict['.*'] = F

        super(ReHandOFCLearner, self).__init__(batch_size, A, B, F_dict, *args, **kwargs)

        self.input_state_index = -1
    
    def calc_int_kin(self, current_state, target_state, decoder_output, task_state, state_order=None):
        '''Overriding to account for proper subtraction of angles.'''
        try:
            current_state = np.mat(current_state).reshape(-1, 1)
            target_state = np.mat(target_state).reshape(-1, 1)
            F = self.F_dict[task_state]
            A = self.A
            B = self.B

            diff = target_state - current_state
            for i in range(4):
                diff[i] = angle_subtract(target_state[i], current_state[i])

            return A*current_state + B*F*(diff)        
        except KeyError:
            return None


class IsMoreOFCLearner(OFCLearner):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, batch_size, *args, **kwargs):
        '''Specific instance of the OFCLearner for full IsMore system
        (ArmAssist + ReHand).'''
        dt = kwargs.pop('dt', 0.1)

        ssm = StateSpaceIsMore()
        A, B, _ = ssm.get_ssm_matrices()
        
        # TODO -- velocity cost? not necessary?
        Q = 1*np.mat(np.diag([1., 1., 1., 1., 1., 1., 1., 0, 0, 0, 0, 0, 0, 0, 0]))
        self.Q = Q
        
        R = 1e7 * np.mat(np.diag([1., 1., 1., 1., 1., 1., 1.]))
        self.R = R

        F = feedback_controllers.LQRController.dlqr(A, B, Q, R)
        F_dict = RegexKeyDict()
        F_dict['.*'] = F

        super(IsMoreOFCLearner, self).__init__(batch_size, A, B, F_dict, *args, **kwargs)

        self.input_state_index = -1
    
    def calc_int_kin(self, current_state, target_state, decoder_output, task_state, state_order=None):
        '''Overriding to account for proper subtraction of angles.'''
        try:
            current_state = np.mat(current_state).reshape(-1, 1)
            target_state = np.mat(target_state).reshape(-1, 1)
            F = self.F_dict[task_state]
            A = self.A
            B = self.B

            diff = target_state - current_state
            for i in range(2, 7):
                diff[i] = angle_subtract(target_state[i], current_state[i])

            # print 'diff:'
            # print diff
            # print 'A*current_state'
            # print A*current_state
            BF = B*F
            print 'c1:', BF[7,0]
            print 'c2:', BF[7,7]
            print 'B*F*diff'
            print B*F*diff
            return A*current_state + B*F*(diff)        
        except KeyError:
            return None


######################
## Goal Calculators ##
######################
## In their current form, these are all the same as goal_calculators.ZeroVelocityGoal
class ArmAssistControlGoal(object):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, ssm):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        # assert type(ssm) == state_space_models.StateSpaceArmAssist
        self.ssm = ssm

    def __call__(self, target_pos, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        target_vel = np.zeros(3)  # TODO -- may not always want zero velocity 
        offset_val = 1
        error = 0
        target_state = np.hstack([target_pos, target_vel, 1])
        return (target_state, error), True

    def reset(self):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        pass

class ReHandControlGoal(object):
    '''
    Docstring

    Parameters
    ----------

    Returns
    -------
    '''
    def __init__(self, ssm):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        # assert type(ssm) == state_space_models.StateSpaceReHand
        self.ssm = ssm

    def __call__(self, target_pos, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        target_vel = np.zeros(4)  # TODO -- may not always want zero velocity 
        offset_val = 1
        error = 0
        target_state = np.hstack([target_pos, target_vel, 1])
        return (target_state, error), True

    def reset(self):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        pass

class IsMoreControlGoal(object):
    '''Full ArmAssist+ReHand.'''
    def __init__(self, ssm):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        # assert type(ssm) == state_space_models.StateSpaceIsMore
        self.ssm = ssm

    def __call__(self, target_pos, **kwargs):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        target_vel = np.zeros(7)  # TODO -- may not always want zero velocity 
        offset_val = 1
        error = 0
        target_state = np.hstack([target_pos, target_vel, 1])
        return (target_state, error), True

    def reset(self):
        '''
        Docstring

        Parameters
        ----------

        Returns
        -------
        '''
        pass

########################################

# Define some dictionaries below so that we don't have to always write:
#     if self.plant_type == 'ArmAssist':
#         ...
#     elif self.plant_type == 'ReHand':
#         ...

SSM_CLS_DICT = {
    'ArmAssist': StateSpaceArmAssist,
    'ReHand':    StateSpaceReHand,
    'IsMore':    StateSpaceIsMore,
}

ASSISTER_CLS_DICT = {
    'ArmAssist': ArmAssistAssister,
    'ReHand':    ReHandAssister,
    'IsMore':    IsMoreAssister,
}

LFC_ASSISTER_CLS_DICT = {
    'ArmAssist': ArmAssistLFCAssister,
    'ReHand':    ReHandLFCAssister,
    'IsMore':    IsMoreLFCAssister,
}

GOAL_CALCULATOR_CLS_DICT = {
    'ArmAssist': ArmAssistControlGoal,
    'ReHand':    ReHandControlGoal,
    'IsMore':    IsMoreControlGoal,
}

LEARNER_CLS_DICT = {
    'ArmAssist': ArmAssistLearner,
    'ReHand':    ReHandLearner,
    'IsMore':    IsMoreLearner,
}

OFC_LEARNER_CLS_DICT = {
    'ArmAssist': ArmAssistOFCLearner,
    'ReHand':    ReHandOFCLearner,
    'IsMore':    IsMoreOFCLearner,
}
